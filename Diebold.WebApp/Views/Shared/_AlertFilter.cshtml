@model Diebold.WebApp.Models.AlertFilterViewModel

<div class="half columns"></div>
<div class="seven columns">
<div class="edit-cpny-grp-sub-title" style="width:100%">
    <p>Alert Filter</p>
</div>
 <div class="cont-lft">
    <div class="comp-lft" style="width:40%">
        @(Html.Kendo().ComboBox()
        .Name("AlertTypes")
        .Placeholder("-- Alert Type --")
        .DataTextField("Text")
        .DataValueField("Value")
        .Events(ev => ev.Change("AlertTypeChanged"))
        .DataSource(source =>
            {
                source.Read(read =>
                    {
                        read.Action("GetAlertType", "Reporting");
                    });
            })
        )
       
    </div>
    <div class="comp-right" style="width:60%">
        @(Html.Kendo().Grid(Model.AlertTypeView)
        .HtmlAttributes(new { style = "width:100%" })
        .Name("grdAlertType")
        .Selectable()
        .DataSource(dataSource => dataSource
        .Ajax()
        .Read(read => read.Action("GetEmptyAlertType", "Reporting"))
        .ServerOperation(false)
        )
        .Columns(columns =>
        {
            columns.Bound(p => p.AlertType).Width("65%");
            columns.Command(command => command.Custom("Delete").Click("RemoveSelectedAlertType")).Title("Action");
        })
        .Sortable()
        .DataSource(dataSource => dataSource
        .Ajax()
        )
        )
        </div>
        <div class="clear"></div>
     <div class="comp-lft" style="width:40%">
         <label id="lblFromDate" style="color:Black">From Date: </label> 
         @(Html.Kendo().DatePickerFor(x => x.DisplayDateFrom)
              .Value(System.DateTime.Now)
              .HtmlAttributes(new { style = "width:80%" })
          )
        <div class="clear"></div>
          <label id="lblToDate" style="color:Black">To Date: </label> 
          @(Html.Kendo().DatePickerFor(x => x.DisplayDateTo)
                .Value(System.DateTime.Now)
                .HtmlAttributes(new { style = "width:80%" })
           )
     </div>
      
 </div>
</div>
<div class="one columns"></div>
<div class="seven columns">
<div class="edit-cpny-grp-sub-title" style="width:100%">
    <p>Alert Status Filter</p>
</div>
     <div class="cont-right">
        <div class="comp-lft" style="width:40%">
          @(Html.Kendo().ComboBox()
            .Name("cboDeviceStatus")
            .Placeholder("-- Select --")
            .DataTextField("Text")
            .DataValueField("Value")
            .DataSource(source =>
                {
                    source.Read(read =>
                        {
                            read.Action("GetAvailableDevice", "Reporting");
                        });
                })
             )
           </div>
        <div class="comp-right" style="width:60%">
              @(Html.Kendo().Grid(Model.UserInvolvedView)
                    .HtmlAttributes(new { style = "width:100%" })
                    .Name("grdUsers")
                    .Selectable()
                    .DataSource(dataSource => dataSource        
                    .Ajax()
                    .Read(read => read.Action("", ""))
                    .ServerOperation(false)
                    )
                    .Columns(columns =>
                    {
                        columns.Bound(p => p.UserInvolved).Width("65%");
                        columns.Command(command => command.Custom("Delete").Click("RemoveSelectedUserInvolved")).Title("Action");
                    })                    
                    .Sortable()
                    .DataSource(dataSource => dataSource
                    .Ajax()
                    )
              )
          </div>
        <div class="clear"></div>
        <div class="comp-lft" style="width:40%">
             @(Html.Kendo().ComboBox()
            .Name("UserId")
            .Placeholder("-- User Involved --")
            .DataTextField("Text")
            .DataValueField("Value")
            .Events(ev => ev.Change("UserChanged"))
            .DataSource(source =>
                {
                    source.Read(read =>
                        {
                            read.Action("GetUserList", "Reporting");
                        });
                })
            )
          </div>
        <div class="clear"></div>
        <div class="comp-lft" style="margin-top:4%;">
        
         </div>
        
     </div>
</div>
<div class="half columns"></div>
   @(Html.Kendo().Window()
    .Name("DuplicateAlertFilterWindow")
    .Title("Error")
    .Visible(false)
    .Modal(true)
    .Content(@<text>
<div style="padding: 5px">
    <label id="lblDieboldAlertFilter"></label>
</div>
</text>)
    .Draggable(false)
    .Width(275)
    .Height(170)
)

<script language="javascript" type="text/javascript">
    function AlertTypeChanged() {
        var isDirty = true;
        var AlertTypescombobox = $("#AlertTypes").data("kendoComboBox");
        var grid = $("#grdAlertType").data("kendoGrid");
        var data = grid.dataSource.data();
        var totalNumber = data.length;
        var datasource = grid.dataSource;
        // datasource.insert({ AlertType: AlertTypescombobox.text() });
        if (totalNumber > 0) {
            for (var i = 0; i < totalNumber; i++) {
                var currentDataItem = data[i].AlertType;
                if (currentDataItem == AlertTypescombobox.text()) {
                    fnShowDuplicatemsg("Same alert type already added.");
                    isDirty = true;
                    break;
                }
                else {
                    //  datasource.insert({ GroupName: Devicecombobox.text(), GroupId: Devicecombobox.value() });
                    isDirty = false;
                }
            }
        }
        else {
            datasource.insert({ AlertType: AlertTypescombobox.text() });
        }
        if (isDirty == false) {
            datasource.insert({ AlertType: AlertTypescombobox.text() });
        }
    }

    function UserChanged() {
        var isDirty = true;
        var UserIdcombobox = $("#UserId").data("kendoComboBox");
        var grid = $("#grdUsers").data("kendoGrid");
        var data = grid.dataSource.data();
        var totalNumber = data.length;
        var datasource = grid.dataSource;
        // datasource.insert({ UserInvolved: UserIdcombobox.text(), UserId: UserIdcombobox.value() });
        if (totalNumber > 0) {
            for (var i = 0; i < totalNumber; i++) {
                var currentDataItem = data[i].UserInvolved;
                if (currentDataItem == UserIdcombobox.text()) {
                    fnShowDuplicatemsg("Same User involved already added.");
                    isDirty = true;
                    break;
                }
                else {
                    isDirty = false;
                }
            }
        }
        else {
            datasource.insert({ UserInvolved: UserIdcombobox.text(), UserId: UserIdcombobox.value() });
        }
        if (isDirty == false) {
            datasource.insert({ UserInvolved: UserIdcombobox.text(), UserId: UserIdcombobox.value() });
        }
    }
    
    function RemoveSelectedAlertType(e) {
        e.preventDefault();
        var grid = $("#grdAlertType").data("kendoGrid");
        var selectedRow = grid.select();
        var index = selectedRow.index();
        grid.removeRow(grid.tbody.find("tr")[index]);
    }

    function RemoveSelectedUserInvolved(e) {
        e.preventDefault();
        var grid = $("#grdUsers").data("kendoGrid");
        var selectedRow = grid.select();
        var index = selectedRow.index();
        grid.removeRow(grid.tbody.find("tr")[index]);
    }

    function fnShowDuplicatemsg(errormsg) {
        $("#lblDieboldAlertFilter").text(errormsg);
        $("#DuplicateAlertFilterWindow").data("kendoWindow").center().open();
    }
</script>